# -*- coding: utf-8 -*-
"""geneticalgorithm-8queens-and-14bishop-problem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SZSOcPMYvEcc4MAZqLsQ7B_VF5qg5dPn
"""

import numpy as np
import pandas as pd

"""<div style="color:#D81F26;
           display:fill;
           border-radius:30px;
           border-style: solid;
           border-color:#404040;
           background-color:#FF8000;
           font-size:30px;
           font-family:Verdana;
           letter-spacing:0.5px">
<h1 style="text-align: center;
           padding: 15px;
           color:#000000;">
Generate_population function:
</h1>
    
<hr>

<p style="color:#000000;">This function produces the initial population, this function produces all the positions of the ministers, ie 8! = 40320:</p>

</div>
"""

def generate_population():
    chromosome = [[i, j, k, l, m, n, o, p]
           for i in range(1, 9)
           for j in range(1, 9)
           for k in range(1, 9)
           for l in range(1, 9)
           for m in range(1, 9)
           for n in range(1, 9)
           for o in range(1, 9)
           for p in range(1, 9)
           if all([i != j, i != k, i != l, i != m, i != n, i != o, i != p,
                   j != k, j != l, j != m, j != n, j != o, j != p,
                   k != l, k != m, k != n, k != o, k != p,
                   l != m, l != n, l != o, l != p,
                   m != n, m != o, m != p,
                   n != o, n != p,
                   o != p])]
    chromosome = np.array(chromosome)
    chromosome = pd.DataFrame(chromosome)
    return chromosome

"""8 CHESS PIECE PROBLEM

"""

initial_population = generate_population()
initial_population.head()

# chrome=[]
# for i in range(1, 9):
#    for j in range(1, 9):
#        for k in range(1, 9):
#            for l in range(1, 9):
#                for m in range(1, 9):
#                    for n in range(1, 9):
#                        for o in range(1, 9):
#                            for p in range(1, 9):
#                                a=i,j,k,l,m,n,o,p
#                                chrome.append(a)

chrome = np.array(chrome)
chrome= pd.DataFrame(chrome)
print(chrome.shape)
chrome.head()

chrome.head()

initial_population=chrome

"""<div style="color:#D81F26;
           display:fill;
           border-radius:30px;
           border-style: solid;
           border-color:#404040;
           background-color:#FF8000;
           font-size:30px;
           font-family:Verdana;
           letter-spacing:0.5px">
<h1 style="text-align: center;
           padding: 15px;
           color:#000000;">
Fitness function:
</h1>
    
<hr>

<p style="color:#000000;">This function takes population and achieves Fitness for each chromosome:</p>

</div>
"""

def fitness(population):
    pop_size = population.shape[0]
    x = 0
    y = 0
    b = 0
    c = 0
    Fit = []
    for k in range(pop_size):
        for i in range(8):
            c = 0
            for j in range(8):
                if(i != j):
                    x = abs(i-j)
                    y = abs(population.iloc[k][i] - population.iloc[k][j])
                    if(x == y):
                        c += 1
        b = 28-c
        Fit.append(b)
    Fitness = np.array(Fit)
    return Fitness
#commenting it for ROOK
     #remove (x == y) for digonal

#bishop has hromesome for 14 CELL



#knight has chromesome for 32 CELL

Fitness = fitness(initial_population)
Fitness

data = pd.DataFrame(initial_population)
data['Fit'] = pd.DataFrame(Fitness)

data.shape

data_100 = data.sample(n=100)
data_100 = data_100.reset_index(drop = True)
data_100

"""<div style="color:#D81F26;
           display:fill;
           border-radius:30px;
           border-style: solid;
           border-color:#404040;
           background-color:#FF8000;
           font-size:30px;
           font-family:Verdana;
           letter-spacing:0.5px">
<h1 style="text-align: center;
           padding: 15px;
           color:#000000;">
Selection function:
</h1>
    
<hr>

<p style="color:#000000;">This function takes our data from the input and gives us two chromosomes as a parent:</p>

</div>
"""

def selection(data):
    selected_parent = data.sample(n=5)#n can be 5-15
    selected_parent = selected_parent.sort_values("Fit", ascending=False)
    selected_parent1 = selected_parent.iloc[0]
    selected_parent2 = selected_parent.iloc[1]
    return selected_parent1[:8], selected_parent2[:8]

"""<div style="color:#D81F26;
           display:fill;
           border-radius:30px;
           border-style: solid;
           border-color:#404040;
           background-color:#FF8000;
           font-size:30px;
           font-family:Verdana;
           letter-spacing:0.5px">
<h1 style="text-align: center;
           padding: 15px;
           color:#000000;">
Crossover function:
</h1>
    
<hr>

<p style="color:#000000;">This function takes two chromosomes from the input and returns the two chromosomes after Crossover:</p>

</div>
"""

def crossover(C1, C2):
    point = np.random.randint((1,7), size=1)
    point = int(point)

    C1_1 = C1[:point]
    C1_2 = C1[point:]

    C2_1 = C2[:point]
    C2_2 = C2[point:]

    C1_tuple = (C1_1, C2_2)
    C1 = np.hstack(C1_tuple)

    C2_tuple = (C2_1, C1_2)
    C2 = np.hstack(C2_tuple)
    return C1, C2

"""<div style="color:#D81F26;
           display:fill;
           border-radius:30px;
           border-style: solid;
           border-color:#404040;
           background-color:#FF8000;
           font-size:30px;
           font-family:Verdana;
           letter-spacing:0.5px">
<h1 style="text-align: center;
           padding: 15px;
           color:#000000;">
Mutation function:
</h1>
    
<hr>

<p style="color:#000000;">This function takes a chromosome from the input and returns the chromosome after mutation is applied to it:</p>

</div>
"""

def mutation(ch):
    point1 = np.random.randint(8, size=1)
    point1 = int(point1)

    point2 = np.random.randint(8, size=1)
    point2 = int(point2)

    first_ele = ch[point1]
    second_ele = ch[point2]

    ch[point1] = second_ele
    ch[point2] = first_ele

    return ch

Parent1 = []
Child_Gen1 = []
for i in range(25):
    Pa1, Pa2 = selection(data_100)
    Parent1.append(Pa1)
    Parent1.append(Pa2)

    Child1, Child2 = crossover(Pa1, Pa2)

    Child1 = mutation(Child1)
    Child2 = mutation(Child2)

    Child_Gen1.append(Child1)
    Child_Gen1.append(Child2)

Parent1_df = pd.DataFrame(Parent1)
Parent1_df = Parent1_df.reset_index(drop = True)

Child_Gen1 = pd.DataFrame(Child_Gen1)
Child_Gen1 = Child_Gen1.reset_index(drop = True)

print(Child_Gen1.shape)
print(Child_Gen1.head())

Gen1_Fitness = fitness(Child_Gen1)
data_Gen1 = Child_Gen1
data_Gen1['Fit'] = pd.DataFrame(Gen1_Fitness)

print(len(data_Gen1))
data_Gen1.head()

Parent2 = []
Child_Gen2 = []
for i in range(12):
    Pa1, Pa2 = selection(data_Gen1)
    Parent2.append(Pa1)
    Parent2.append(Pa2)

    Child1, Child2 = crossover(Pa1, Pa2)

    Child1 = mutation(Child1)
    Child2 = mutation(Child2)

    Child_Gen2.append(Child1)
    Child_Gen2.append(Child2)

Parent2_df = pd.DataFrame(Parent2)
Parent2_df = Parent2_df.reset_index(drop = True)

Child_Gen2 = pd.DataFrame(Child_Gen2)
Child_Gen2 = Child_Gen2.reset_index(drop = True)

print(len(Child_Gen2))
Child_Gen2.head()

Gen2_Fitness = fitness(Child_Gen2)
data_Gen2 = Child_Gen2
data_Gen2['Fit'] = pd.DataFrame(Gen2_Fitness)

print(len(data_Gen2))
data_Gen2.head()

Parent3 = []
Child_Gen3 = []
for i in range(6):
    Pa1, Pa2 = selection(data_Gen2)
    Parent3.append(Pa1)
    Parent3.append(Pa2)

    Child1, Child2 = crossover(Pa1, Pa2)

    Child1 = mutation(Child1)
    Child2 = mutation(Child2)

    Child_Gen3.append(Child1)
    Child_Gen3.append(Child2)

Parent3_df = pd.DataFrame(Parent3)
Parent3_df = Parent3_df.reset_index(drop = True)

Child_Gen3 = pd.DataFrame(Child_Gen3)
Child_Gen3 = Child_Gen3.reset_index(drop = True)

print(len(Child_Gen3))
Child_Gen3.head()

Gen3_Fitness = fitness(Child_Gen3)
data_Gen3 = Child_Gen3
data_Gen3['Fit'] = pd.DataFrame(Gen3_Fitness)

print(len(data_Gen3))
data_Gen3.head()

Parent4 = []
Child_Gen4 = []
for i in range(4):
    Pa1, Pa2 = selection(data_Gen3)
    Parent4.append(Pa1)
    Parent4.append(Pa2)

    Child1, Child2 = crossover(Pa1, Pa2)

    Child1 = mutation(Child1)
    Child2 = mutation(Child2)

    Child_Gen4.append(Child1)
    Child_Gen4.append(Child2)

Parent4_df = pd.DataFrame(Parent4)
Parent4_df = Parent4_df.reset_index(drop = True)

Child_Gen4 = pd.DataFrame(Child_Gen4)
Child_Gen4 = Child_Gen4.reset_index(drop = True)

print(len(Child_Gen4))
Child_Gen4.head()

Gen4_Fitness = fitness(Child_Gen4)
data_Gen4 = Child_Gen4
data_Gen4['Fit'] = pd.DataFrame(Gen4_Fitness)

print(len(data_Gen4))
data_Gen4.head()

CHILD = data_Gen1.append(data_Gen2)
CHILD = CHILD.append(data_Gen3)
CHILD = CHILD.append(data_Gen4)

CHILD.head()

CHILD = CHILD.sort_values("Fit", ascending=False)
CHILD = CHILD.reset_index(drop = True)
CHILD.head()

"""<div style="color:#D81F26;
           display:fill;
           border-radius:30px;
           border-style: solid;
           border-color:#404040;
           background-color:#FF8000;
           font-size:30px;
           font-family:Verdana;
           letter-spacing:0.5px">
<h1 style="text-align: center;
           padding: 15px;
           color:#000000;">
Finished!
</h1>
    
<hr>

<p style="color:#000000;">Thanks for your attention and for reading this post. Please write your comments for me.</p>

</div>

## ***14 BISHOP***

---

â­•
"""

import numpy as np
import pandas as pd
import random
import math

# import random

# min_value = 1
# max_value = 10

# # Generate a list of non-repeating random numbers
# random_sequence = random.sample(range(min_value, max_value + 1), max_value - min_value + 1)

# print(random_sequence)

population_size = 3  # You can change this to the desired population size
array_length = 14
min_value = 1
max_value = 64

# Generate the population
population = []

for _ in range(population_size):
    #new_array = [random.randint(min_value, max_value) for _ in range(array_length)]
    unique_elements = random.sample(range(min_value, max_value + 1), min(array_length, max_value - min_value + 1))
    new_array = unique_elements
    #new_array= [random.sample(range(min_value, max_value + 1), max_value - min_value + 1) for _ in range(array_length)]

    population.append(new_array)

to_check=[1, 9, 17, 25, 33, 41 ,49, 8, 16, 24, 32, 40, 48, 56]
population.append(to_check)

population = np.array(population)
population = pd.DataFrame(population)
population

len(population.loc[0])

def fitness(pop):
  pop_size=pop.shape[0]
  b=0
  fit=[]
  for k in range(pop_size):
    c=0
    for m in range(len(population.loc[k])-1):
      i=population.loc[k][m]

      i_col=0
      i_row=math.ceil(i/8)
      if(i%8==0):
           i_col=8
      else:
        i_col=i%8
      for n in range(m,len(population.loc[k])-1,1):
        j=population.loc[k][n]
        if(i != j):
            j_col=0
            j_row=math.ceil(j/8)
            if(j%8==0):
                j_col=8
            else:
                j_col=j%8
            x=abs(i_row-j_row)
            y=abs(i_col-j_col)
            if(x == y):
              c=c+ 1
    b=91-c
    fit.append(b)
  Fitness = np.array(fit)
  return Fitness

Fit_b=fitness(population)

data = pd.DataFrame(population)
data['Fit'] = pd.DataFrame(Fit_b)

data

